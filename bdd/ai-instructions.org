* Introduction
This document contains instructions for an ai agent to assist in my workflow, which is oriented around behavior-driven development. Each other headline contains instructions for how to help with a specific task.

For further information on the principles and practices I am exploring an implementing, which should guide you in your tasks as well, see:
- the entirety of the https://cucumber.io/ site

General instructions that apply to all tasks:

Generated stories, scenarios, test code, or any other text should be presented in one org-mode code block (so I can easily copy/paste). Just give me the code blocks without accompanying explanations; I will ask for further clarification if I have questions.

* Generating stories
I will provide you with what I refer to as "ideas" - unstructured text that contains natural language brainstorming about desired system behavior. From these informal ideas, generate user stories in the following format (enclosed in quotes):
"* future <story title>
:PROPERTIES:
:ID: <id>
:CATEGORY: task
:EFFORT_TYPE: work
:FREQUENCY: once
:HAS_DUE_DATE: no
:EFFORT_AMOUNT: average
:BUDGET_IMPACT: trivial
:COMMITMENT: probably
:HARD_DATE_DEPENDENCY: no
:SOFT_DATE_DEPENDENCY: no
:HARD_INTERNAL_DEPENDENCY: no
:SOFT_INTERNAL_DEPENDENCY: no
:HARD_EXTERNAL_DEPENDENCY: no
:SOFT_EXTERNAL_DEPENDENCY: no
:EFFORT: 0d
:ESTIMATED_COST: 0
:ACTUAL_EFFORT: 
:ACTUAL_COST: 
:END:

#+begin_src feature :tangle features/<story_title_with_underscores>.feature
  Feature: <story title>
    <story content>
#+end_src"

Stories should follow the general pattern "As a <role>, I want <feature>, so that <benefit>".

Each story should be centered around a single desired feature.

Generated stories should reproduce the template verbatim except for the enclosing quotation marks and the content marked by angle brackets:
- <story title> should be replaced with a short title that succinctly represents the story's feature. Err on the side of being terse; it doesn't have to fully describe the feature.
- <id> should be replaced by a new globally unique ID that you generate. It should matche the format of this example: 91820a49-8db9-4908-af33-7188be99d57a
- <story_title_with_underscores> should be the same story title as in the headline, but with spaces replaced by underscores
- <story content> should be the text of the story according to the general pattern "As a <role>, I want <feature>, so that <benefit>", although it could be expanded as necessary. Each phrase should be on a different line.

* Generating scenarios
I will provide you with org headlines and content, which I refer to collectively as "stories". Notice that each headline represents a user story. Each story contains some metadata in a properties drawer (everything between and including ":PROPERTIES:" and ":END:") and a code block in the Gherkin language used by Cucumber. There also might be some text between the properties drawer and the code block.

Generate scenarios in Gherkin for each story. A scenario is a concrete example of one element of the story's desired new functionality. Scenarios are used by humans to explore, discover and agree on the details of what's expected to be done for the story. They also, along with associated test code, serve as a way to programatically confirm the system functions as expected.

Generate as many scenarios as seems appropriate to fully test and implement the story; err on the side of being thorough. Each scenario should be focused on a single element of functionality, but it's fine if that "single element of functionality" requires multiple test instances, each with different data (Scenario Templates are useful for these situations). Scenarios should be independent of the state or outcome of other scenarios. Also take note of any descriptive text that may appear before the code block, as it might have ideas or further instructions for scenario generation for that story. You can ignore the properties drawer.

As a general suggestion for you (but not necessarily a requirement), begin by generating scenarios for base cases, then generate at least 2 scenarios for what would be normal, expected behavior and normal, expected inputs (apart from the base cases), and finally generate scenarios for edge cases, unexpected behavior and inputs, and errors.

Gherkin-specific instructions:
- Regarding keywords, use "Scenario" rather than "Example", "Scenario Template" rather than "Scenario Outline", and, within Scenario Templates, "Examples" rather than "Scenarios".

For further reference, see:
- https://cucumber.io/docs/gherkin/reference
- https://cucumber.io/docs/bdd/better-gherkin

* Generating tests
I will provide you with a Gherkin feature file and specify a language. Generate tests for the feature according to the relevant language-specific instructions below as well as the following general instructions:

- Generate one test per scenario.
  
** Python
Assume I'm using pytest-bdd.
